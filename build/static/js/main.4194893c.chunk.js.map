{"version":3,"sources":["components/Display.jsx","components/NavBar.jsx","Algorithms/SortingAlgorithm.js","components/SortingVisualizer.jsx","App.js","index.js"],"names":["Display","Array","className","style","display","map","el","height","NavBar","props","useState","currSortAlgo","setSortAlgo","Sorted","document","querySelector","disabled","class","type","id","onClick","GenerateArray","e","currentTarget","SelectionSort","BubbleSort","MergeSort","InsertionSort","alert","SelectionSortHelper","animations","i","length","min_index","j","obj","color","swap","push","temp","BubbleSortHelper","Merge","Arr","leftindex","mid","rightindex","leftlength","rightlength","left","right","k","l","r","parseInt","MergeSortHelper","InsertionSortHelper","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","setArray","AlreadySorted","setSorted","ResetArray","Math","floor","random","useEffect","a","index1","index2","Bar1","querySelectorAll","Bar2","backgroundColor","Promise","resolve","setTimeout","height1","height2","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","newHeight","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4194893c.chunk.js","sourcesContent":["\r\nimport \"../css/Display.css\";\r\n\r\nconst Display = ({Array}) => {\r\n \r\n\r\n  return (\r\n    <div className=\" bar-container row-2\">\r\n      <div className=\"col-11\" style={{ display: \"flex\" }}>\r\n        {Array.map((el) => {\r\n          return <div className=\"bar\" style={{ height: el }}></div>;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import { useState } from \"react\";\r\nimport \"../css/NavBar.css\";\r\n\r\nlet NavBar = (props) => {\r\n  let [currSortAlgo, setSortAlgo] = useState(\"\");\r\n\r\n  if (props.Sorted === true) {\r\n    document.querySelector(\".sort\").disabled = false;\r\n    document.querySelector(\".reset-array\").disabled = false;\r\n  }\r\n\r\n  return (\r\n    <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n      <div class=\"container-fluid\">\r\n        <span class=\"navbar-brand\">Sorting Visualizer</span>\r\n        <button\r\n          class=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarNav\"\r\n          aria-controls=\"navbarNav\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span class=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n          <ul class=\"navbar-nav\">\r\n            <li\r\n              class=\"nav-item nav-link\"\r\n              onClick={() => {\r\n                setSortAlgo(\"Selection Sort\");\r\n              }}\r\n            >\r\n              Selection Sort\r\n            </li>\r\n            <li\r\n              class=\"nav-item nav-link\"\r\n              onClick={() => {\r\n                setSortAlgo(\"Merge Sort\");\r\n              }}\r\n            >\r\n              Merge Sort\r\n            </li>\r\n            <li\r\n              class=\"nav-item nav-link\"\r\n              onClick={() => {\r\n                setSortAlgo(\"Insertion Sort\");\r\n              }}\r\n            >\r\n              Insertion Sort\r\n            </li>\r\n            <li\r\n              class=\"nav-item nav-link\"\r\n              onClick={() => {\r\n                setSortAlgo(\"Bubble Sort\");\r\n              }}\r\n            >\r\n              Bubble Sort\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <label className=\"namespace\"> {currSortAlgo} </label>\r\n      <button\r\n        type=\"button\"\r\n        className=\" reset-array btn btn-danger me-2 \"\r\n        onClick={() => {\r\n          props.GenerateArray();\r\n        }}\r\n      >\r\n        Generate Array\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        class=\" sort btn btn-danger me-2 \"\r\n        onClick={(e) => {\r\n          if (currSortAlgo === \"\") {\r\n            alert(\"Select Algorithm\");\r\n            return;\r\n          } else if (props.Sorted === true) {\r\n            alert(\"Already Sorted\");\r\n            return;\r\n          } else if (props.Sorted === false) {\r\n            e.currentTarget.disabled = true;\r\n            let Generate = document.querySelector(\".reset-array\");\r\n            Generate.disabled = true;\r\n          }  \r\n          if (currSortAlgo === \"Selection Sort\") {\r\n            props.SelectionSort();\r\n          } else if (currSortAlgo === \"Bubble Sort\") {\r\n            props.BubbleSort();\r\n          } else if (currSortAlgo === \"Merge Sort\") {\r\n            props.MergeSort();\r\n          } else if (currSortAlgo === \"Insertion Sort\") {\r\n            props.InsertionSort();\r\n          }\r\n        }}\r\n      >\r\n        Sort\r\n      </button>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","export const SelectionSortHelper = (Array) => {\r\n  let animations = [];\r\n\r\n  for (let i = 0; i < Array.length; i++) {\r\n    let min_index = i;\r\n    for (let j = i + 1; j < Array.length; j++) {\r\n      let obj = { color: [], swap: [] };\r\n\r\n      obj[\"color\"].push(min_index, j);\r\n\r\n      if (Array[min_index] > Array[j]) {\r\n        obj[\"swap\"].push(Array[j], Array[min_index]);\r\n\r\n        let temp = Array[min_index];\r\n        Array[min_index] = Array[j];\r\n        Array[j] = temp;\r\n      } else {\r\n        obj[\"swap\"].push(Array[min_index], Array[j]);\r\n      }\r\n\r\n      animations.push(obj);\r\n    }\r\n  }\r\n\r\n  return animations;\r\n};\r\n\r\nexport const BubbleSortHelper = (Array) => {\r\n  let animations = [];\r\n\r\n  for (let i = 0; i < Array.length; i++) {\r\n    for (let j = 0; j < Array.length - i - 1; j++) {\r\n      let obj = { swap: [], color: [] };\r\n      obj[\"color\"].push(j, j + 1);\r\n      if (Array[j] > Array[j + 1]) {\r\n        obj[\"swap\"].push(Array[j + 1], Array[j]);\r\n        let temp = Array[j];\r\n        Array[j] = Array[j + 1];\r\n        Array[j + 1] = temp;\r\n      } else {\r\n        obj[\"swap\"].push(Array[j], Array[j + 1]);\r\n      }\r\n      animations.push(obj);\r\n    }\r\n  }\r\n\r\n  return animations;\r\n};\r\n\r\nlet animations = [];\r\n\r\nlet Merge = (Arr, leftindex, mid, rightindex) => {\r\n  let leftlength = mid - leftindex + 1;\r\n  let rightlength = rightindex - mid;\r\n  let left = new Array(leftlength);\r\n  let right = new Array(rightlength);\r\n  for (let i = 0; i < leftlength; i++) {\r\n    left[i] = Arr[i + leftindex];\r\n  }\r\n  for (let i = 0; i < rightlength; i++) {\r\n    right[i] = Arr[i + mid + 1];\r\n  }\r\n\r\n  let i = 0,\r\n    j = 0;\r\n  let k = leftindex;\r\n  while (i < leftlength && j < rightlength) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i + leftindex, j + mid + 1]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i + leftindex, j + mid + 1]);\r\n    if (left[i] < right[j]) {\r\n      animations.push([k, left[i]]);\r\n      Arr[k++] = left[i];\r\n      i++;\r\n    } else {\r\n      animations.push([k, right[j]]);\r\n\r\n      Arr[k++] = right[j];\r\n      j++;\r\n    }\r\n  }\r\n\r\n  while (i < leftlength) {\r\n    animations.push([i + leftindex, i + leftindex]);\r\n    animations.push([i + leftindex, i + leftindex]);\r\n    animations.push([k, left[i]]);\r\n    Arr[k++] = left[i++];\r\n  }\r\n\r\n  while (j < rightlength) {\r\n    animations.push([j + mid + 1, j + mid + 1]);\r\n    animations.push([j + mid + 1, j + mid + 1]);\r\n    animations.push([k, right[j]]);\r\n    Arr[k++] = right[j++];\r\n  }\r\n};\r\nlet MergeSort = (Array, l, r) => {\r\n  if (l >= r) {\r\n    return;\r\n  }\r\n\r\n  let mid = l + parseInt((r - l) / 2);\r\n\r\n  MergeSort(Array, l, mid);\r\n  MergeSort(Array, mid + 1, r);\r\n\r\n  Merge(Array, l, mid, r);\r\n};\r\n\r\nexport const MergeSortHelper = (Array) => {\r\n  let l = 0,\r\n    r = Array.length - 1;\r\n\r\n  MergeSort(Array, l, r);\r\n\r\n  return animations;\r\n};\r\n\r\nexport const InsertionSortHelper = (Array) => {\r\n  let animations = [];\r\n\r\n  for (let i = 0; i < Array.length; i++) {\r\n    let j = i - 1;\r\n    \r\n    while (j >= 0 && Array[j] > Array[j + 1]) {\r\n      let obj = { color: [], swap: [] };\r\n      obj[\"color\"].push(j, j + 1);\r\n      obj[\"swap\"].push(Array[j + 1], Array[j]);\r\n      let temp = Array[j + 1];\r\n      Array[j + 1] = Array[j];\r\n      Array[j] = temp;\r\n      animations.push(obj);\r\n      j--;\r\n    }\r\n  }\r\n\r\n  return animations;\r\n};\r\n","import Display from \"./Display\";\r\nimport NavBar from \"./NavBar\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  SelectionSortHelper,\r\n  BubbleSortHelper,\r\n  MergeSortHelper,\r\n  InsertionSortHelper,\r\n} from \"../Algorithms/SortingAlgorithm\";\r\n\r\nconst PRIMARY_COLOR = \"rgba(0, 132, 255, 0.527)\";\r\nconst SECONDARY_COLOR = \" rgb(49, 226, 13)\";\r\n\r\n\r\nlet SortingVisualizer = () => {\r\n  let [Array, setArray] = useState([]);\r\n  let [AlreadySorted,setSorted]=useState(false);\r\n\r\n  let ResetArray = () => {\r\n    let temp = [];\r\n    for (let i = 0; i < 50; i++) {\r\n      temp.push(Math.floor(Math.random() * 105) + 5);\r\n    }\r\n    setSorted(false);\r\n    setArray(temp);\r\n  };\r\n\r\n  useEffect(() => {\r\n    ResetArray();\r\n  }, []);\r\n\r\n  let GenerateArray = () => {\r\n    ResetArray();\r\n  };\r\n\r\n  let SelectionSort = async () => {\r\n    let animations = SelectionSortHelper(Array);\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      let [index1, index2] = animations[i].color;\r\n\r\n      let Bar1 = document.querySelectorAll(\".bar\")[index1];\r\n      let Bar2 = document.querySelectorAll(\".bar\")[index2];\r\n\r\n      Bar1.style.backgroundColor = SECONDARY_COLOR;\r\n      Bar2.style.backgroundColor = SECONDARY_COLOR;\r\n\r\n      await new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve();\r\n        }, 200);\r\n      });\r\n\r\n      let [height1, height2] = animations[i].swap;\r\n      Bar1.style.height = `${height1}px`;\r\n      Bar2.style.height = `${height2}px`;\r\n      await new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve();\r\n        }, 200);\r\n      });\r\n      Bar1.style.backgroundColor = PRIMARY_COLOR;\r\n      Bar2.style.backgroundColor = PRIMARY_COLOR;\r\n    }\r\n    setSorted(true);\r\n  };\r\n\r\n  let BubbleSort = async () => {\r\n    let animations = BubbleSortHelper(Array);\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      let [index1, index2] = animations[i].color;\r\n\r\n      let Bar1 = document.querySelectorAll(\".bar\")[index1];\r\n      let Bar2 = document.querySelectorAll(\".bar\")[index2];\r\n\r\n      Bar1.style.backgroundColor = SECONDARY_COLOR;\r\n      Bar2.style.backgroundColor = SECONDARY_COLOR;\r\n\r\n      await new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve();\r\n        }, 200);\r\n      });\r\n\r\n      let [height1, height2] = animations[i].swap;\r\n      Bar1.style.height = `${height1}px`;\r\n      Bar2.style.height = `${height2}px`;\r\n      await new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve();\r\n        }, 200);\r\n      });\r\n      Bar1.style.backgroundColor = PRIMARY_COLOR;\r\n      Bar2.style.backgroundColor = PRIMARY_COLOR;\r\n    }\r\n    setSorted(true);\r\n  };\r\n\r\n  let MergeSort = async () => {\r\n    const animations = MergeSortHelper(Array);\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        await new Promise((resolve) => {\r\n          setTimeout(() => {\r\n            resolve();\r\n          }, 200);\r\n        });\r\n        barOneStyle.backgroundColor = color;\r\n        barTwoStyle.backgroundColor = color;\r\n      } else {\r\n        await new Promise((resolve) => {\r\n          setTimeout(() => {\r\n            resolve();\r\n          }, 200);\r\n        });\r\n        const [barOneIdx, newHeight] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        barOneStyle.height = `${newHeight}px`;\r\n      }\r\n    }\r\n\r\n    setSorted(true);\r\n  };\r\n  let InsertionSort = async () => {\r\n    let animations = InsertionSortHelper(Array);\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      let [index1, index2] = animations[i].color;\r\n\r\n      let Bar1 = document.querySelectorAll(\".bar\")[index1];\r\n      let Bar2 = document.querySelectorAll(\".bar\")[index2];\r\n\r\n      Bar1.style.backgroundColor = SECONDARY_COLOR;\r\n      Bar2.style.backgroundColor = SECONDARY_COLOR;\r\n\r\n      await new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve();\r\n        }, 200);\r\n      });\r\n\r\n      let [height1, height2] = animations[i].swap;\r\n      Bar1.style.height = `${height1}px`;\r\n      Bar2.style.height = `${height2}px`;\r\n      await new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve();\r\n        }, 200);\r\n      });\r\n      Bar1.style.backgroundColor = PRIMARY_COLOR;\r\n      Bar2.style.backgroundColor = PRIMARY_COLOR;\r\n    }\r\n    setSorted(true);\r\n  };\r\n  return (\r\n    <>\r\n      <NavBar\r\n        SelectionSort={SelectionSort}\r\n        BubbleSort={BubbleSort}\r\n        MergeSort={MergeSort}\r\n        InsertionSort={InsertionSort}\r\n        GenerateArray={GenerateArray}\r\n        Sorted={AlreadySorted}\r\n      />\r\n      <Display Array={Array} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SortingVisualizer;\r\n","import SortingVisualizer from \"./components/SortingVisualizer\";\n\nfunction App() {\n  return <SortingVisualizer/>;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}